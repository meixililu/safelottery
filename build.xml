<?xml version="1.0" encoding="UTF-8"?>
<project name="SafeLottery" default="deploy" basedir="." >
	<!--   deploy  release -->
	<!-- ANT环境变量 -->
	<property environment="env" />

	<property file="local.properties"/>

	<!-- 应用名称 -->
	<property name="appName" value="${ant.project.name}"/>
	<!-- 引用到的库应用名称 -->
	<property name="lib-app_name" value="${LIBRARY}"/>
	<!-- SDK目录(获取操作系统环境变量ANDROID_SDK_HOME的值) -->
	<property name="sdk-folder" value="${sdk.dir}" />
	<!-- SDK指定平台目录 -->
	<property name="sdk-platform-folder" value="${sdk-folder}/platforms/android-17"/>
	<!-- SDK中tools目录 -->
	<property name="sdk-tools" value="${sdk-folder}/oldversion/tools" />
	<!-- SDK指定平台中tools目录 -->
	<property name="sdk-platform-tools" value="${sdk-folder}/platform-tools" />

	<!-- 使用到的命令(当前系统为windows,如果系统为linux,可 将.bat文件替换成相对应的命令) -->
	<property name="aapt" value="${sdk-platform-tools}/aapt" />
	<property name="aidl" value="${sdk-platform-tools}/aidl" />
	<property name="dx" value="${sdk-platform-tools}/dx.bat" />
	<property name="apkbuilder" value="${sdk-tools}/apkbuilder.bat" />
	<property name="jarsigner" value="${JAVA_HOME}/bin/jarsigner" />

	<!--     <property name="jarsigner" value="${JAVA_HOME}/bin/zipalign" /> -->
	<condition property="zipalign" value="${sdk-tools}/zipalign.exe" else="${sdk-tools}/zipalign">
		<os family="windows" />
	</condition>

	<!-- 编译aidl文件所需的预处理框架文件framework.aidl -->
	<property name="framework-aidl" value="${sdk-platform-folder}/framework.aidl" />

	<!-- 生成R文件的相对目录 -->
	<property name="outdir-gen" value="gen" />
	<!-- 编译后的文件放置目录 -->
	<property name="outdir-bin" value="bin" />
	<!-- 编译后so文件放置目录 -->
	<property name="native.libs.dir" value="libs" />  
    <property name="native.libs.absolute.dir" location="${native.libs.dir}" /> 

	<!-- 优化之后文件放置目录 -->
	<property name="outdir-zipalign" value="${sdk.dir}/zipalign" />

	<!-- 清单文件 -->
	<property name="manifest-xml" value="AndroidManifest.xml" />
	<!-- 源文件目录 -->
	<property name="resource-dir" value="res" />
	<property name="asset-dir" value="assets" />
	<property name="lib.dir" value="lib" />
	<!-- java源文件目录 -->
	<property name="srcdir" value="src" />
	<property name="srcdir-ospath" value="${basedir}/${srcdir}" />
	<!-- 外部类库所在目录 -->
	<property name="external-lib" value="libs" />
	<property name="external-lib-ospath" value="${basedir}/${external-lib}" />

	<!-- 编译需要的jar; 如果项目使用到地图服务则需要maps.jar -->
	<property name="android-jar" value="${sdk-platform-folder}/android.jar" />
	
	<!-- 生成class目录 -->
	<property name="outdir-asset" value="${basedir}/${outdir-bin}/assets" />
	<property name="outdir-asset-asset" value="${basedir}/${outdir-bin}/assets/assets" />
	<property name="outdir-unzip_asset" value="${basedir}/bin/unzip/assets" />
	<property name="outdir-unzip" value="${outdir-bin}/unzip" />
	<property name="outdir-classes" value="${outdir-bin}" />
	<property name="outdir-classes-ospath" value="${basedir}/${outdir-classes}" />
	
	<property name="outdir-unzip_res" value="${basedir}/bin/unzip/res" />
	

	<!-- classes.dex相关变量 -->
	<property name="dex-file" value="classes.dex" />
	<property name="dex-path" value="${outdir-bin}/${dex-file}" />
	<property name="dex-ospath" value="${basedir}/${dex-path}" />

	<!-- 经过aapt生成的资源包文件 -->
	<property name="resources-package" value="${outdir-bin}/resources.ap_" />
	<property name="resources-package-ospath" value="${basedir}/${resources-package}" />

	<!-- 未认证apk包 -->
	<property name="out-unsigned-package" value="${outdir-bin}/${appName}-unsigned.apk" />
	<property name="out-unsigned-package-ospath" value="${basedir}/${out-unsigned-package}" />

	<!-- 证书文件 -->
	<property name="keystore-file" value="${basedir}/android.keystore" />

	<!-- 已认证apk包 -->
	<property name="out-signed-package" value="${outdir-bin}/${appName}.apk" />
	<property name="out-signed-package-ospath" value="${basedir}/${out-signed-package}" />

	<condition property="zipalign-package-ospath" 
        value="${outdir-zipalign}/zcp_standard_${app_version}_${channel}.apk" 
        else="${outdir-zipalign}">
		<os family="windows" />
	</condition>

	<property environment="env" />
	<target name="init">
		<echo>Initializing all output directories...</echo>
		<delete dir="${outdir-bin}" />
		<mkdir dir="${outdir-bin}" />
		<mkdir dir="${outdir-classes}" />
		<mkdir dir="${outdir-unzip}" />
		<mkdir dir="${outdir-asset-asset}" />
	</target>
	
	<!-- 根据工程中的资源文件生成R.java文件  -->
	<target name="gen-R" depends="init">
		<echo>Generating R.java from the resources...</echo>
		<exec executable="${aapt}" failonerror="true">
			<arg value="package" />
			<arg value="-m" />
			<arg value="-J" />
			<arg value="${outdir-gen}" />
			<arg value="-M" />
			<arg value="${manifest-xml}" />
			<arg value="-S" />
			<arg value="${resource-dir}" />
			<arg value="-S" />
            <arg value="${lib-app_name}/${resource-dir}" />
			<arg value="-I" />
			<arg value="${android-jar}" />
			<arg value="--auto-add-overlay" />
		</exec>
	</target>
	<!-- 为库项目生成R.java文件  -->
	<target name="gen-lib_project-R" depends="gen-R">
		<echo>generating R.java for library to dir gen (using aapt) ... </echo>
		<exec executable="${aapt}" failonerror="true">
			<arg value="package" />
            <arg value="-m" />
            <arg value="--non-constant-id" />
            <arg value="--auto-add-overlay" />
            <arg value="-J" />
            <arg value="${outdir-gen}" />
            <arg value="-M" />
            <arg value="${lib-app_name}/${manifest-xml}" />
            <arg value="-S" />
            <arg value="${lib-app_name}/${resource-dir}" />
            <arg value="-I" />
            <arg value="${android-jar}" />
 
         </exec>
	</target>

	<!-- 编译aidl文件 -->
	<target name="aidl" depends="gen-lib_project-R">
		<echo>Compiling .aidl into java files...</echo>
		<apply executable="${aidl}" failonerror="true">
			<!-- 指定预处理文件 -->
			<arg value="-p${framework-aidl}" />
			<!-- aidl声明的目录 -->
			<arg value="-I${srcdir}" />
			<!-- 目标文件目录 -->
			<arg value="-o${outdir-gen}" />
			<!-- 指定哪些文件需要编译 -->
			<fileset dir="${srcdir}">
				<include name="**/*.aidl" />
			</fileset>
		</apply>
	</target>

	<!-- 将工程中的java源文件编译成class文件 -->
	<target name="compile" depends="aidl">
		<echo>Compiling java source code...</echo>
		<javac encoding="utf-8" target="1.6" destdir="${outdir-classes}" bootclasspath="${android-jar}" includeantruntime="false">
		    <src path="src" /> 
		    <src path="${lib-app_name}/src" /> 
		    <src path="gen" /> 
			<classpath>
				<fileset dir="${external-lib}" includes="*.jar"/>
				<fileset dir="${lib-app_name}/${external-lib}" includes="*.jar"/>
			</classpath>
		</javac>
	</target>
	
	<!-- 将.class文件转化成.dex文件 -->
	<target name="dex" depends="compile">
		<echo>Converting compiled files and external libraries into a .dex file...</echo>
		<exec executable="${dx}" failonerror="true">
			<arg value="--dex" />
			<!-- 输出文件 -->
			<arg value="--output=${dex-ospath}" />
			<!-- 要生成.dex文件的源classes和libraries -->
			<arg value="${outdir-classes-ospath}" />
			<arg value="${external-lib-ospath}"/>
			<arg value="${lib-app_name}/${external-lib}"/>
		</exec>
	</target>
	
	<!-- 将资源文件放进输出目录 -->
	<target name="package-res-and-assets" >
		<echo>Packaging resources and assets...</echo>
		<exec executable="${aapt}" failonerror="true">
			<arg value="package" />
			<arg value="-f" />
			<arg value="-M" />
			<arg value="${manifest-xml}" />
			<arg value="-S" />
			<arg value="${resource-dir}" />
			<arg value="-S" />
            <arg value="${lib-app_name}/res" />
			<arg value="-A" />
			<arg value="${asset-dir}" />
			<arg value="-I" />
			<arg value="${android-jar}" />
			<arg value="-F" />
			<arg value="${resources-package}" />
			<arg value="--auto-add-overlay" />
		</exec>
	</target>
	
	<target name="unjar_dependencies">
	    <echo>unjar_dependencies</echo>
	    <unzip dest="${outdir-unzip}">
	        <fileset dir="${external-lib}">
	            <include name="weibo_sdk.jar" />
	            <include name="open_sdk.jar" />
	            <include name="UPPayPluginEx.jar" />
	        </fileset>    
	    </unzip>
	</target>
	
	<target name="copy_assets_dir" depends="unjar_dependencies">
	    <echo>copy_assets_dir</echo>
	    <copy todir="${outdir-asset-asset}">
		    <fileset dir="${outdir-unzip_asset}"/>
	    </copy>
	    <copy todir="${outdir-bin}">
		    <fileset dir="${outdir-unzip_res}"/>
	    </copy>
	</target>
	
	<!-- 打包成未签证的apk -->
	<target name="package" depends="dex, package-res-and-assets,copy_assets_dir">
		<echo>Packaging unsigned apk for release...</echo>
		<exec executable="${apkbuilder}" failonerror="true">
			<arg value="${out-unsigned-package-ospath}" />
			<arg value="-u" />
			<arg value="-z" />
			<arg value="${resources-package-ospath}" />
			<arg value="-f" />
			<arg value="${dex-ospath}" />
			<arg value="-rf" />
			<arg value="${outdir-asset}" />
			<arg value="-rf" />
			<arg value="${srcdir-ospath}" />
			<!--打包.so库文件-->
			<arg value="-nf" />
			<arg value="${native.libs.absolute.dir}" />
		</exec>
		<echo>It will need to be signed with jarsigner before being published.</echo>
	</target>

	<macrodef name="zipalign-helper">
		<attribute name="in.package" />
		<attribute name="out.package" />
		<sequential>
			<echo>Running zip align on final apk...</echo>
			<exec executable="${zipalign}" failonerror="true">
				<arg line="${v.option}" />
				<arg value="-f" />
				<arg value="4" />
				<arg path="@{in.package}" />
				<arg path="@{out.package}" />
			</exec>
		</sequential>
	</macrodef>


	<!-- 对apk进行签证 -->
	<target name="jarsigner" depends="package">
		<echo>Packaging signed apk for release...</echo>
		<exec executable="${jarsigner}" failonerror="true">
			<arg value="-verbose" />
			<arg value="-keystore" />
			<arg value="${keystore-file}" />
			<arg value="-storepass" />
			<arg value="zch168" />
			<arg value="-keypass" />
			<arg value="zch168" />
			<arg value="-signedjar" />
			<arg value="${out-signed-package-ospath}" />
			<arg value="${out-unsigned-package-ospath}"/>
			<!-- 不要忘了证书的别名 -->
			<arg value="zch"/>
		</exec>
	</target>

	<!--进行优化-->
	<target name="zipalign" depends="jarsigner">
		<exec executable="${zipalign}" failonerror="true">
			<arg value="-v" />
			<arg value="-f" />
			<arg value="4" />
			<arg value="${out-signed-package-ospath}" />
			<arg value="${zipalign-package-ospath}" />
		</exec>
	</target>

	<!-- 发布  depends="jarsigner"-->
	<target name="release" depends="zipalign">
		<!-- 删除未签证apk -->
		<delete file="${out-unsigned-package-ospath}"/>
		<echo>APK is released. path:${out-signed-package-ospath}</echo>
	</target>

	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<pathelement location="D:/ant-contrib/ant-contrib-1.0b3.jar"/>
		</classpath>
	</taskdef>

	<target name="modify_manifest">
		<replaceregexp flags="g" byline="false">
			<regexp pattern="android:value='(.*)' android:name='CHANNEL'" />
			<substitution expression="android:value='${channel}' android:name='CHANNEL'" />
			<fileset dir="" includes="AndroidManifest.xml" />
		</replaceregexp>
		<replaceregexp flags="g" byline="false">  
		    <regexp pattern="android:name='BaiduMobAd_CHANNEL' android:value='(.*)'" />  
    		<substitution expression="android:name='BaiduMobAd_CHANNEL' android:value='${channel}'" /> 
		    <fileset dir="" includes="AndroidManifest.xml" />
	    </replaceregexp>  
		<property name="out.release.file" location="${zipalign-package-ospath}/zcp_${app_version}_${channel}.apk" />
		<antcall target="release" />
	</target>
	<target name="deploy">
		<foreach target="modify_manifest" list="${market_channels}" param="channel" delimiter="," />
	</target>


</project>
